{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to our Documentation Portal","text":"<p>This portal is a one stop for all technical information regarding our products - both hardware and software. </p> <p>If more information is needed or you have any feedback kindly write to us support@tenxinnovations.com</p>"},{"location":"ble_api/","title":"BLE API","text":""},{"location":"ble_api/#provisioning-api","title":"Provisioning API","text":"<ol> <li> <p>Upon a user action, such as a button press on the Sentroller device, a flag in the advertisement is set. This indicates that to the mobile app that provisioning mode is entered. </p> </li> <li> <p>The mobile app scans for device advertisments with the provisioning field enabled. </p> </li> <li> <p>The mobile app establishes a connection with the device in provisioning mode</p> </li> <li> <p>The mobile app discovers the Sentroller BLE services, plus a read and write characteristic.  The mobile app writes the WiFi credentials and a call back address into the BLE using the following JSON.</p> </li> </ol> <pre><code>    {\n    \"SSID\":\"&lt;users_wifi_ssid&gt;\", \n    \"pphrase\":\"&lt;wifi_password&gt;\",\n    \"cbapi\":\"&lt;http://www.callbacklocation.com&gt;\"\n    }\n</code></pre> <ol> <li>Upon successful provision the Sentroller will invoke the callback API, signalling to the backend that the Provisioning was successful (or failure code). The callback API must be specified by the mobile app developer.                  </li> <li>It is also possible to get a provisioning result response directly via BLE by doing a read on the read charactertics's buffer. The result will be:</li> </ol> <pre><code>{\"Provisioning result\":\"&lt;status&gt;\"}\n</code></pre> <p>where status could be</p> <ul> <li>Pending : Provisioning still in process</li> <li>Success : Device successfully provisioned</li> <li>fail_no_wifi: Failed due to WiFi connectivity issue</li> <li>fail_other : Failed due to any other issue</li> </ul>"},{"location":"ble_interface/","title":"BLE Interface","text":""},{"location":"ble_interface/#introduction","title":"Introduction","text":"<p>The Sentroller Mark 1 is BLE enabled. It is able to connect to mobile phones and exchange information. Compared to WiFi, BLE offers significant power savings and extends the battery life by an order of magnitude.  In applications where a mobile app cannot be used to relay information to the internet, a custom Sentroller can be deployed to act as a BLE Internet relay.  </p>"},{"location":"ble_interface/#ble-architecture","title":"BLE Architecture","text":"<p>The sentroller device exposes a subset of features in the BLE 5.0 spec. </p> <p>The Sentroller BLE is configured as a Peripheral device in Server mode. </p> <p>As a Peripheral device, the Sentroller advertises itself through bluetooth advertisements.  The advertisements are configurable and can contain important information about the state of the product. </p> <p>As a server the device can accept incoming connection requests from Clients (such as a mobile phone). Once the connection is established, the client can write to, and read data from the sentroller.</p> <p>Note: The Sentroller cannot initiate a connection to a Client. A client such as the mobile device will have to initiate a connection. </p>"},{"location":"ble_interface/#mac-address-and-device-id","title":"MAC ADDRESS and Device ID","text":"<p>The BLE interface has a MAC address associated with it.  This MAC address also serves as the unique device ID for the Sentroller.  The BLE MAC ADDRESS IS 6 bytes, usually written in an AA:BB:CC:DD:EE:FF format. </p>"},{"location":"ble_interface/#ble-mac-address-handling-in-android-vs-ios","title":"BLE MAC address handling in Android vs iOS","text":"<p>The Bluetooth stack is different in Android and iOS, which impacts how devices are scanned and identified.  In Android, when the application requests a scan, the BLE stack scans for devices and reports the device's hardware MAC address. </p> <p>In iOS however, the stack scans for devices, but obfuscates the hardware MAC address and replaces it with a device 16 byte UUID. </p> <p>From a mobile app perspective it is critical to know the device's hardware MAC address, since this is the Sentroller's uniqueID. To overcome this, the Sentroller sends its hardware MAC address in a second location BLE advertisment for redundancy. </p>"},{"location":"ble_interface/#_1","title":"BLE Interface","text":"<ol> <li>Default location: In the BLE spec's source hardware field, grey box name ADV ADDRESS. iOS will obfuscate this and report up the stack</li> <li>Sentroller redundancy : In the advertisment data's user field, yellow box (which iOS will not alter).</li> </ol> <p>Thus by inspecting the BLE advertisment, and examining the user data field, the mobile app can determine the true MAC address of the device hardware regardless of Android or iOS. </p>"},{"location":"ble_interface/#sentroller-ble-interface-features","title":"Sentroller BLE Interface features","text":""},{"location":"ble_interface/#the-mobile-phone-can-interact-with-the-sentroller-in-two-ways","title":"The mobile phone can interact with the Sentroller in two ways.","text":"<ul> <li>by connecting to it, and then performing certain actions. </li> <li>by simply listening to the advertisements, which contain useful information about the product state. </li> </ul>"},{"location":"ble_interface/#interactions-with-a-ble-connection","title":"Interactions with a BLE connection.","text":"<ol> <li> <p>Provision the Sentroller.  Provisioning is the process of associating a new Sentroller device with an end customer account. Usually once provisioned, an end device is assumed to be in  operation and in use by the end customer. Provisioning is also a mechanism to connect a device to the Cloud via WiFi, or other connectivity channels.</p> </li> <li> <p>Write data into the Sentroller. The mobile phone is able to write data into the Sentroller. The nature of data written into the Sentroller is customizable and dependent on the end application. For eg. If used in a sensing application, the Sentroller exposes a few configurable parameter such as sensing frequency, reporting intervals, sensor  thresholds etc. These can be adjusted by writing to them via the BLE Interface. </p> </li> <li> <p>Read data from the Sentroller. The mobile app is also able to read data from the Sentroller. The nature of data that can be read from the Sentroller is customizable and dependent on the end  application. For eg. If used in a sensing application, the  Sentroller exposes data such as sensor state, last sensor event, sensor thresholds, battery level etc. These data can be read via the BLE Interface</p> </li> </ol>"},{"location":"ble_interface/#the-sentroller-ble-service","title":"The Sentroller BLE service","text":"<p>The Sentroller exposes  one BLE service with a read and write characteristic for all of the above 3 interaction. By varying the data payload, different functionalities can be realized. Eg, for provisioning a certain data payload is sent, while for writing sensing parameters a different payload is sent. The read and write characteristics each have a data buffer associated with it. To send data to the Sentroller, write into the write buffer. To read data from the Sentroller, read from the read buffer.</p>"},{"location":"ble_interface/#data-format-for-connection-based-interactions","title":"Data format for connection based interactions","text":"<p>Once a BLE connection is established between Client (mobile app) and Server (Sentroller/ edge device), the data format is customizable. The packet size is however fixed to 80 bytes. </p> <p>The Sentroller uses a format called packed JSON data, for efficient over the air communication.  Example a JSON such as </p> <pre><code>{\"ssid\":\"netgear123\",\"passphrase\":\"secret123\"}\n</code></pre> <p>is converted to a byte array format such as:</p> <pre><code>82 a4 73 73 69 64 aa 6e 65 74 67 65 61 72 31 32 33 aa 70 61 73 73 70 68 72 61 73 65 a9 73 65 63 72 65 74 31 32 33\n</code></pre> <p>The conversion from JSON -&gt; packed Byte array and packed Byte array -&gt; JSON  is handled by a small and light weight program called message pack. The mobile app developer only needs to create and handle JSONs. Message pack is available for multiple languages. Visit msgpack.org for more info. </p> <p>To send data to the sentroller, create a JSON structure, invoke msgpack to serialize the data, place the resulting byte array data in the buffer of the BLE write characteristic.</p> <p>Similarly, when reading data from the sentroller, read the buffer of the BLE read characteristic, pass buffer to message pack to de-serialize, which then results in  JSON output. </p>"},{"location":"ble_interface/#interactions-without-a-ble-connection","title":"Interactions without a BLE connection","text":"<ol> <li>Reading and interpreting the BLE advertisement. The Sentroller transmits a BLE advertisement self every 300ms (configurable). This BLE advertisement, contains information such as the MAC address of the device, battery level, provisioning status, and also application related information such as sensor state, last event, thresholds etc. By monitoring these advertisment, the mobile app can track the real time state of the device, without having to connect to it.  The nature of the data in the advertisment can be configured. </li> </ol>"},{"location":"ble_interface/#data-format-for-connection-less-interactions","title":"Data Format for connection-less interactions.","text":"<p>BLE advertisments are a fixed 31 byte sized packet (37 bytes in all, of which 6 are used for MAC Address). The size and format of the packet is governed by the Bluetooth specification. </p> <p></p> <p>The user data portion of the BLE advertisement (AD 0 to AD N) is configurable based on application need. </p> <p>BLE advertisements are sent over the air as a simple byte array. Various libraries exist in application development frameworks to extract this byte array into custom data structures. </p> <p>Data Format. </p> <p>For BLE advertisment.  BLE advertisments are a fixed 31 byte sized packet. The size and format of the packet is governed by the Bluetooth specification.  Insert image here</p> <p>The user data portion of the BLE advertisement is configurable based on application need. Some possible field are  1. Battery level 2. Provisioning status 3. Device Heart beat data 4. Sensor Readings</p> <p>BLE advertisements are sent over the air as a simple byte array. Various libraries exist in application development frameworks to extract this byte array into  custom data structures. </p>"},{"location":"ble_interface/#provisioning-process","title":"Provisioning Process.","text":"<ol> <li> <p>Upon a user action, such as a button press on the Sentroller device, a flag in the advertisement is set. This indicates that to the mobile app that provisioning mode is entered. </p> </li> <li> <p>The mobile app scans for device advertisments with the provisioning field enabled. </p> </li> <li> <p>The mobile app establishes a connection with the device in provisioning mode</p> </li> <li> <p>The mobile app discovers the Sentroller BLE services, plus a read and write characteristic.  The mobile app writes the WiFi credentials and a call back address into the BLE using the following JSON.</p> </li> </ol> <pre><code>{\n\"SSID\":\"&lt;users_wifi_ssid&gt;\", \n\"pphrase\":\"&lt;wifi_password&gt;\",\n\"cbapi\":\"&lt;http://www.callbacklocation.com&gt;\"\n}\n</code></pre> <p>1.Upon successful provision the Sentroller will invoke the callback API, signalling to the backend that the Provisioning was successful (or failure code). The callback API must be specified by the mobile app developer.                 1.It is also possible to get a provisioning result response directly via BLE by doing a read on the read charactertics buffer. The result will be:</p> <pre><code>{\"Provisioning result\":\"&lt;status&gt;\"}\n</code></pre> <p>where status could be * Pending : Provisioning still in process * Success : Device successfully provisioned * fail_no_wifi: Failed due to WiFi connectivity issue * fail_other : Failed due to any other issue</p>"},{"location":"http_api/","title":"API URLs","text":"<p>API access can be over HTTP or HTTPs</p>"},{"location":"http_api/#security-note","title":"Security Note","text":"<p>We strongly advise to use HTTPs to make sure your data travels encrypted, avoiding the exposure of your API token and/or sensor data.</p>"},{"location":"http_api/#httphttps","title":"HTTP/HTTPS","text":"Protocol TenX Account Endpoint Port HTTP OEM http://oem-iot.com 80 HTTPS OEM https://oem-iot.com 443 <p>TenX supports SSL v1.1, TLS v1.2 and v1.3.</p> <p>Root certificates are shared separately and are available in multiple formats.</p> <ul> <li><code>PEM</code>: A certificate chain with two root certificates from our certificate authorities (CAs).</li> <li><code>DER</code>: Same as the PEM file, with an alternative encoding.</li> <li><code>CRT</code>: Same as the PEM file, with a different extension. Often referred to as .crt, .cert or .cer.</li> </ul>"},{"location":"http_api/#api-overview","title":"API OVERVIEW","text":"API name Description Get device status API Gets the status information of the device Set device configuration API Sets configuration data of the device Event notifier API Allows Client Backend to get notified of event via webhooks Event alert API Allows customers to get notified of alerts via email/ sms FOTA API Allows OEM to update firmware of devices"},{"location":"http_api/#get-device-status","title":"Get Device Status","text":"<p>This API fetches the last seen status of the Sentroller device or IoT Module.</p> <p>Usage:</p> <pre><code>https:/oem-iot.com/api/v1.6/devices/&lt;device_label&gt;/device_status\n</code></pre> <p>Where <code>&lt;device_label&gt;</code> is a string with the label of the device to which data will be sent to.</p>"},{"location":"http_api/#headers","title":"Headers","text":"<p>The <code>\"X-Auth-Token\"</code> header is required for your request:</p> Header Value Required? Description X-Auth-Token Token Yes Auth token of account"},{"location":"http_api/#examples","title":"Examples","text":"<p>Get last seen status of a device:</p> <pre><code>$ curl -X GET 'https://oem-iot.com/api/v1.6/devices/device_status\u2019 \\\n-H 'X-Auth-Token: oaXBo6ODhIjPsusNRPUGIK4d72bc73'\n</code></pre> <p>Expected response:</p> <pre><code>{\n\u00a0 \"Name\": Sentroller_mark1,\n\u00a0 \"device_id\": \"A1234\",\n\u00a0 \"battery\": 80,\n\u00a0 \"timestamp\" : 1635264014782\n\u00a0 \"Config\": [\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \"frequency\": 34,\n\u00a0 \u00a0 \u00a0 \"param1\": 0,\n\u00a0 \u00a0 \u00a0 \"param2\": 22\n\u00a0 \u00a0 }\n\u00a0 ]\n}\n</code></pre>"},{"location":"http_api/#configure-a-single-device","title":"Configure a single device","text":"<p>This API sends configuration data to a single device</p> <p>USAGE:</p> HTTP METHOD URL POST https://oem-iot.com/api/v1.6/devices;/ <p>Where <code>&lt;device_label&gt;</code>\u00a0is a string with the label of the Device to which data will be sent to.</p>"},{"location":"http_api/#headers_1","title":"Headers","text":"<p>The <code>\"X-Auth-Token\"</code> header is required for your request:</p> Header Value Required? Description X-Auth-Token Token Yes Auth token of account Content-Type application/json Yes Type of data in body"},{"location":"http_api/#examples_1","title":"Examples","text":"<p>Set configuration for a given device</p> <pre><code>$ curl -X POST 'https://oem-iot.com/api/v1.6/devices/&lt;device_label&gt;/' \\\n\u00a0-H 'Content-Type: application/json' \\\n\u00a0-H 'X-Auth-Token: oaXBo6ODhIjPsusNRPUGIK4d72bc73' \\\n\u00a0-d '{\"frequency\": 10, \u201cparam1\u201d:340}'\n</code></pre> <p>Expected response:</p> <pre><code>{\n\"Frequency\":[{\"status_code\":201}],\n\"param1\":[{\"status_code\":201}]\n}\n</code></pre>"},{"location":"http_api/#event-notifier-api","title":"Event Notifier API","text":"<p>This API allows the OEM-IOT Cloud to inform the customer app of events of interest.</p> <p>USAGE:</p> HTTP METHOD URL POST https://oem-iot.com/api/v1.6/devices/&lt;device_label&gt;/ <p>Where <code>&lt;device_label&gt;</code>\u00a0is a string with the label of the Device to which data will be sent to.</p>"},{"location":"http_api/#headers_2","title":"Headers","text":"<p>The <code>\"X-Auth-Token\"</code> header is required for your request:</p> Header Value Required? Description X-Auth-Token Token Yes Auth token of account Content-Type application/json Yes Type of data in body <p>Events of interest</p> Config settings have taken effect Configuration changes at console have taken effect Low battery Battery low on device FOTA results FOTA success/ fail Sensor event Sensor reading crosses threshold Device online Device has come online <p>Note: OEM needs to provide a callback API which will get invoked when above events of interest occur on a device.</p>"},{"location":"http_api/#example1","title":"Example1","text":"<p>Get notified when a configuration has taken effect</p> <pre><code>$ curl -X POST 'https://oem-iot.com/api/v1.6/devices/&lt;device_label&gt;/' \\\n-H 'Content-Type: application/json' \\\n-H 'X-Auth-Token: oaXBo6ODhIjPsusNRPUGIK4d72bc73' \\\n-d '{\"config_event_id\":  (\"https://&lt;your-url&gt;/&lt;your-notification-api&gt;\"), \u201cconfig_event_param\u201d:0}'\n</code></pre> <p>Expected response:</p> <pre><code>200 OK\n</code></pre>"},{"location":"http_api/#example2","title":"Example2","text":"<p>Get notified when sensor level crosses a threshold. In this case 450 is the threshold.</p> <pre><code>$ curl -X POST 'https://oem-iot.com/api/v1.6/devices/&lt;device_label&gt;/' \\\n-H 'Content-Type: application/json' \\\n-H 'X-Auth-Token: oaXBo6ODhIjPsusNRPUGIK4d72bc73' \\\n-d '{\"sensor_event_id\":  [\"https://&lt;your-url&gt;/&lt;your-notification-api&gt;\"], \u201csensor_event_param\u201d:450}'\n</code></pre> <p>Expected response:</p> <pre><code>200 OK\n</code></pre>"},{"location":"http_api/#event-alert-api","title":"Event ALERT API","text":"<p>This API allows the 10X Cloud to inform the customer of events of interest. While the Notifier invokes callbacks, the alert API will send emails, SMS etc</p> <p>USAGE:</p> HTTP METHOD URL POST https://oem-iot.com/api/v1.6/devices/&lt;device_label&gt;/ <p>Where <code>&lt;device_label&gt;</code>\u00a0is a string with the label of the Device to which data will be sent to.</p>"},{"location":"http_api/#headers_3","title":"Headers","text":"<p>The <code>\"X-Auth-Token\"</code> header is required for your request:</p> Header Value Required? Description X-Auth-Token Token Yes Auth token of account Content-Type application/json Yes Type of data in body"},{"location":"http_api/#events-of-interest","title":"Events of interest","text":"Low battery Battery low on device Sensor event Sensor reading crosses threshold <p>Methods of alert :</p> <p>Email, SMS, Push Notification (in development)</p> <p>Note:</p> <p>OEM needs to provide an email address or phone number which will get contacted when above events of interest occur on a device.</p>"},{"location":"http_api/#example1_1","title":"Example1","text":"<p>Get an SMS / text message when sensor reading crosses given threshold</p> <pre><code>$ curl -X POST 'https://oem-iot.com/api/v1.6/devices/&lt;device_label&gt;/' \\\n-H 'Content-Type: application/json' \\\n-H 'X-Auth-Token: oaXBo6ODhIjPsusNRPUGIK4d72bc73' \\\n-d '{\"sensor_alert_id\":  [\"+1-800-654-xxyy\"], \u201csensor_alert_method\u201d:\u201dsms\u201d}'\n</code></pre> <p>Expected response:</p> <pre><code>200 OK\n</code></pre>"},{"location":"http_api/#example2_1","title":"Example2","text":"<p>Get an email when battery reading crosses given threshold</p> <pre><code>$ curl -X POST 'https://oem-iot.com/api/v1.6/devices/&lt;device_label&gt;/' \\\n-H 'Content-Type: application/json' \\\n-H 'X-Auth-Token: oaXBo6ODhIjPsusNRPUGIK4d72bc73' \\\n-d '{\"battery_event_id\":  [\"customer_name@gmail.com\"], \u201cbattery_alert_method\u201d:\u201demail\u201d}'\n</code></pre> <p>Expected response:</p> <pre><code>200 OK\n</code></pre>"},{"location":"http_api/#fota-api","title":"FOTA API","text":"<p>This API allows the 10X Cloud to perform an over the air firmware update (FOTA)</p> <p>USAGE:</p> HTTP METHOD URL POST https://oem-iot.com/api/v1.6/devices/&lt;device_label&gt;/ <p>Where <code>&lt;device_label&gt;</code>\u00a0is a string with the label of the Device to which data will be sent to.</p>"},{"location":"http_api/#headers_4","title":"Headers","text":"<p>The <code>\"X-Auth-Token\"</code> header is required for your request:</p> Header Value Required? Description X-Auth-Token Token Yes Auth token of account Content-Type application/json Yes Type of data in body <p>Note: firmware must be placed in a web accessible location (cloud bucket, web server, file server etc)</p>"},{"location":"http_api/#example1_2","title":"Example1","text":"<p>Get an SMS / text message when sensor reading crosses given threshold</p> <pre><code>$ curl -X POST 'https://oem-iot.com/api/v1.6/devices/&lt;device_label&gt;/' \\\n-H 'Content-Type: application/json' \\\n-H 'X-Auth-Token: oaXBo6ODhIjPsusNRPUGIK4d72bc73' \\\n-d '{\"fota_request\":  [\u201chttp://s3.amazonaws.com/[bucket_name]/filename\"]}'\n</code></pre> <p>Expected response:</p> <pre><code>200 OK\n</code></pre>"},{"location":"http_auth/","title":"Authentication","text":"<p>Every request sent to the 10X Cloud requires a token. A token is a unique key that authorizes requests sent to the 10X IoT Cloud. Tokens valid for 6 hours and can be generated using your account\u2019s API Key. Tokens are short lived. Tokens are auto renewed once deployment is complete.. How to send a token in a request:</p> <p><code>X-Auth-Token=token</code></p> <p>Note: Do not send tokens as a query parameter as the token is visible (to logs, browser history and packet sniffers)</p> <p>//Example Request to create a device with Token in\u00a0the Header</p> <pre><code>curl -X POST 'https://oem-iot.com/api/v1.0/devices/' \\\n-H 'Content-Type: application/json' \\\n-H 'X-Auth-Token: oaXBo6ODhIjPsusNRPUGIK4d72bc73' \\\n-d '{}'\n</code></pre>"},{"location":"http_overview/","title":"HTTP Overview","text":"<p>HTTP is the main internet protocol for information exchange in the Internet. It also supports data encryption, which is usually called secure HTTP or HTTPs. When you use a web browser (Firefox, Chrome, Edge, etc.) you are sending and receiving packages using HTTP or HTTPs. Because of this, it is  not surprising to see that HTTPs has become a popular option for data exchange for IoT.</p> <p>When a developer implements HTTPs communication, they should look for a RESTful Application Programming Interface, or REST API, which exposes all the endpoints required to interact with a third-party application (like the OEM-IOT Cloud). In this section, you have a reference of our REST API that allows you to understand how to send and retrieve data from our servers.</p> <p>HTTP requests</p> <p>The following methods are specified within the HTTP standard:</p> HTTP METHOD DESCRIPTION GET Used to retrieve information POST Used to send information <p>HTTP is a request/response protocol, this means that every request that you make is answered by the server. This response includes a number (response code) and a body. For example, when you make a request to retrieve a file on a website \"(e.g. \"Get me the file 'index.html'\" )\", you are effectively sending a GET request. If the request is correct, the server will typically return a 200 response code, along with requested body, in this case the file.</p> <p>An HTTP request also needs the following parameters:</p> <ul> <li><code>Host</code>: Specifies the server you will be making HTTP requests to, e.g. https://oem-iot.com</li> <li><code>Path</code>: This is typically the remaining portion of the URL that specifies the resource you want to consume, e.g. if an API endpoint is: <code>oem-iot.com/api/v1.6/devices/my-device</code> the path is <code>/api/v1.6/devices/my-device</code></li> <li><code>Headers</code>: Define the operating parameters of the HTTP request such as <code>X-Auth-Token</code>, <code>Content-Type</code>, <code>Content-Length</code>, etc.</li> <li><code>Body/payload</code>: In the case of POST and PATCH requests, the body is the data sent to the server, usually as a stringified JSON. By convention GET requests should not have a body because they are meant to request data, not sending them.</li> </ul> <p>OEM-IOT Cloud accepts data as JavaScript Object Notation or JSON. JSON is a typical HTTP data type, it is a collection of name/value pairs. In various programming languages, this is treated as an object, record, struct, dictionary, hash table, keyed list, or associative array. It is also human readable and language independent. An example of a JSON that TenX accepts can be seen below:</p> <p>JSON</p> <pre><code>{\"Frequency\": {\"value\":10, \"timestamp\": 1534881387000, \"context\": {\"machine\": \"1st floor\"}}}\n</code></pre> <p>A typical HTTP request to TenX should be set as below:</p> <p>Text</p> <pre><code>POST {PATH} HTTP/1.1&lt;CR&gt;&lt;LN&gt;\nHost: {HOST}&lt;CR&gt;&lt;LN&gt;\nUser-Agent: {USER_AGENT}&lt;CR&gt;&lt;LN&gt;\nX-Auth-Token: {TOKEN}&lt;CR&gt;&lt;LN&gt;\nContent-Type: application/json&lt;CR&gt;&lt;LN&gt;\nContent-Length: {PAYLOAD_LENGTH}&lt;CR&gt;&lt;LN&gt;&lt;CR&gt;&lt;LN&gt;\n{PAYLOAD}\n&lt;CR&gt;&lt;LN&gt;\n</code></pre> <p>Where:</p> <ul> <li><code>{PATH}</code>: Path to the resource to consume     Example: <code>/api/v1.6/variables/</code> to get user's variables information.</li> <li><code>{HOST}</code>: Host URL.     Example: oem-iot.com</li> <li><code>{USER_AGENT}</code>: An optional string used to identify the type of client, be it by application type, operating system, software vendor or software version of the requesting user agent.     Examples: <code>OEM_CLOUD, CUST_DEVICE</code></li> <li><code>{TOKEN}</code>: Unique key that authorizes your device to ingest data inside your OEM-IOT account.</li> <li><code>{PAYLOAD_LENGTH}</code>: The number of characters of your payload.     Example: The payload <code>{\"Frequency\": 20}</code> will have a content-length of 19.</li> <li><code>{PAYLOAD}</code>: Data to send.     Example: <code>{\"Frequency\": 20}</code></li> </ul>"},{"location":"oec_arc/","title":"OEM-IOT CONNECT ARCHITECTURE","text":""},{"location":"oec_intro/","title":"INTRODUCTION","text":"<p>OEM-IOT connect allows devices (sensors, actuators, edge devices), to be securely and quickly cloud connected.  The purpose of this Cloud product is to empower OEMs to build innovative IoT applications without having to understand or maintain cloud infrastructure necessary to onboard, maintain and manage large number of edge devices. The OEM-IoT Connect also abstracts away hardware and firmware complexities, allowing the developer to focus on their application or business use case, using a simple API.</p> <p>This documentation explains the interaction between an edge devices and the OEM-IOT Connect Cloud using HTTP.</p>"},{"location":"sm1_intro/","title":"Sentroller Mark 1","text":""},{"location":"sm1_intro/#introduction","title":"Introduction","text":"<p>The Sentroller Mark 1 is a compact device that converts a traditional sensing or control device into a cloud enabled IoT device. For eg. a Gas sensor with analog outputs can be quickly plugged into the Sentroller, thus making it a Cloud ready Gas Sensor. Using the appropriate firmware drivers, all the electrical complexities of the sensors are abstracted away, allowing its integration in different environments using simple HTTP APIs. </p> <p>The Sentroller Mark 1 is designed to work with its companion cloud product OEM IoT Connect. </p> <p>The Sentroller Mark 1 can also be used by companies looking to build an IoT device from ground up. It comes with features such as  * Re-chargable battery  * BLE, WiFi and Cellular Connectivity * On board accelerometer and buzzer</p>"},{"location":"wifi_interface/","title":"WiFi Interface","text":"<ol> <li> <p>Communications between the Sentroller and the OEM-IoT Connect Cloud are fully managed by the Sentroller and there is no developer API exposed on this interface. </p> </li> <li> <p>The mobile app always communicates with the Sentroller via the Cloud, there is no direct WiFi connection. </p> </li> <li> <p>The mobile app only needs to provision the Sentroller thus enabling it to get online. </p> </li> </ol>"}]}